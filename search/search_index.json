{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SHACL eXtended","text":""},{"location":"#overview","title":"Overview","text":"<p>SHACL eXtended (SHACL-X) is a fork of the open source implementation of SHACL, TopBraid SHACL API, based on Java and Apache Jena.</p> <p>Following the deprecation of the Nashorn JavaScript engine, TopBraid SHACL API dropped the support of the SHACL JavaScript Extensions (SHACL-JS) features to avoid Nashorn-related issues. Beginning from TopBraid SHACL API version 1.4.0, these features are no longer available.</p> <p>SHACL-X reintroduces support for the SHACL JavaScript Extensions by replacing the Nashorn engine with GraalVM and the Polyglot APIs. The codebase of SHACL-X corresponds to TopBraid SHACL API version 1.3.2.</p>"},{"location":"#x-supported-languages","title":"X \u2192 supported languages","text":"<p>The <code>X</code> in SHACL-X can also be read as a placeholder for the languages supported by the tool. Currently, <code>JavaScript</code> and <code>Python</code> are the supported ones. In this documentation, anytime you encounter an <code>X</code> occurrence you can replace it by any of the supported languages. In case some functionalities are only available for a specific language, it will be explictly stated (i.e. SHACL-JS, SHACL-Py).</p>"},{"location":"#usage","title":"Usage","text":"<p>The tool is released to the GitHub Packages registry as Maven artifact and Docker image.</p>"},{"location":"#application-dependency","title":"Application dependency","text":"Maven <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.github.shacl-x&lt;/groupId&gt;\n    &lt;artifactId&gt;shacl-x&lt;/artifactId&gt;\n    &lt;version&gt;1.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"#docker","title":"Docker","text":"<p>The docker image accepts one parameter as input (command):</p> <ul> <li><code>validate</code></li> <li><code>infer</code></li> </ul> <p>After pulling the latest version as follows: <pre><code>docker pull ghcr.io/shacl-x/shacl-x:latest\n</code></pre></p> <p>one can run the tool: <pre><code>docker run --rm \\\n    -v ${PWD}/data:/data ghcr.io/shacl-x/shacl-x COMMAND \\\n    -datafile /data/data.ttl \\\n    -shapesfile /data/shapes.ttl\n</code></pre></p> <p>Please note that</p> <ul> <li><code>COMMAND</code> must be one between the defined ones</li> <li>a <code>${PWD}/data</code> must exist, as well as <code>data.ttl</code> and <code>shapes.ttl</code> files</li> <li>if the shapes contain SHACL-X features that use the network, a Docker network configuration must also be done (e.g. create a docker network called <code>shacl</code> and pass <code>--network=\"shacl\"</code> to the docker run command)</li> </ul>"},{"location":"#command-line-not-recommended","title":"Command line (not recommended)","text":"<p>Download the latest release from:</p> <p>https://github.com/SHACL-X/shacl-x/packages?ecosystem=maven</p> <p>The binary distribution (shacl-x-VERSION-bin.zip) can be found in the Assets section of the release page.</p> <p>Two command line utilities are included: shaclvalidate (performs constraint validation) and shaclinfer (performs SHACL rule inferencing). To use them, follow the steps as explained in the TopBraid SHACL API readme.</p>"},{"location":"#license","title":"License","text":"<p>The software is released under the Apache 2.0 License.</p>"},{"location":"api/","title":"X API for RDF","text":""},{"location":"api/#rdf-terms","title":"RDF Terms","text":""},{"location":"api/#factory-object","title":"Factory Object","text":"<p>During the execution of the custom code, the SHACL engine provides a Factory Object that can be used to create <code>X</code> Objects for RDF terms. The Object provides the following three functions:</p> <ul> <li><code>literal(lex, languageOrDatatype)</code></li> <li><code>namedNode(uri)</code> </li> <li><code>blankNode(id)</code> or <code>blankNode()</code></li> </ul> <p>The RDF terms objects can be created using the following Factory Object:</p> JavaScriptPython <pre><code>TermFactory\n</code></pre> <pre><code>py_tf\n</code></pre>"},{"location":"api/#terms","title":"Terms","text":"Node Kind Factory Function Test Function Literals <code>literal(lex, languageOrDatatype)</code> <code>isLiteral()</code> IRIs <code>namedNode(uri)</code> <code>isURI()</code> Blank Nodes <code>blankNode(id)</code> or <code>blankNode()</code> <code>isBlankNode()</code>"},{"location":"api/#literals","title":"Literals","text":"<p>A literal is represented by an X <code>Literal</code> Object where <code>isLiteral()</code> returns <code>true</code> while <code>isURI()</code> and <code>isBlankNode()</code> return <code>false</code>. The lexical form of the literal is accessible through <code>getLex()</code>, e.g. <code>\"Switzerland\"</code> for the RDF node <code>\"Switzerland\"^^xsd:string</code>. The language value is accessible through <code>getLanguage()</code> and is a lowercase BCP-47 string (for example, \"en\", \"de\"), or an empty string if the literal has no language. The literal datatype is accessible through <code>getDatatype()</code>, and is a <code>NamedNode</code> representing the datatype IRI of the literal. Note that this datatype is never undefined, and language-tagged strings have <code>rdf:langString</code> as their datatype.</p>"},{"location":"api/#iris","title":"IRIs","text":"<p>An IRI is represented by an X <code>NamedNode</code> Object where <code>isURI()</code> returns <code>true</code> while <code>isBlankNode()</code> and <code>isLiteral()</code> return <code>false</code>. The value of IRI string is accessible through the <code>getUri()</code>.</p>"},{"location":"api/#blank-nodes","title":"Blank Nodes","text":"<p>A blank node is represented by an X <code>BlankNode</code> Object where <code>isBlankNode()</code> returns <code>true</code> while <code>isURI()</code> and <code>isLiteral()</code> return <code>false</code>. The blank node identifier is a string accessible through <code>getId()</code>. That string must be consistent for the same RDF node for the duration of a SHACL validation and processing of validation results.</p>"},{"location":"api/#example-term-creation-using-the-factory-object","title":"Example: Term creation using the Factory Object","text":"JavaScriptPython <pre><code>// Literals\n\n// when the languageOrDatatype is a string it is considered as the language\nTermFactory.literal(\"Switzerland\", \"en\")    // \"Switzerland\"@en\nTermFactory.literal(\"Schweiz\", \"de\")        // \"Schweiz\"@de\n\n// when the languageOrDatatype is a NamedNode it is considered as the dataype\nlet intType = TermFactory.namedNode(\"http://www.w3.org/2001/XMLSchema#integer\")\nTermFactory.literal(10, intType)            // \"10\"^^http://www.w3.org/2001/XMLSchema#integer\n\nlet stringType = TermFactory.namedNode(\"http://www.w3.org/2001/XMLSchema#string\")\nTermFactory.literal(10, stringType)         // \"10\"\n\n// IRIs\nTermFactory.namedNode(\"http://example.org/ns#germanLabel\")\n\n// Blank Nodes\nTermFactory.blankNode()                     // a random id will be generated\nTermFactory.blankNode(\"1298eaa4-61b3\")\n</code></pre> <pre><code># Literals\n\n# when the languageOrDatatype is a string it is considered as the language\npy_tf.literal(\"Switzerland\", \"en\")    # \"Switzerland\"@en\npy_tf.literal(\"Schweiz\", \"de\")        # \"Schweiz\"@de\n\n# when the languageOrDatatype is a NamedNode it is considered as the dataype\nint_type = py_tf.namedNode(\"http://www.w3.org/2001/XMLSchema#integer\")\npy_tf.literal(10, int_type)            # \"10\"^^http://www.w3.org/2001/XMLSchema#integer\n\nstring_type = py_tf.namedNode(\"http://www.w3.org/2001/XMLSchema#string\")\npy_tf.literal(10, string_type)         # \"10\"\n\n# IRIs\npy_tf.namedNode(\"http://example.org/ns#germanLabel\")\n\n# Blank Nodes\npy_tf.blankNode()                     # a random id will be generated\npy_tf.blankNode(\"1298eaa4-61b3\")\n</code></pre>"},{"location":"api/#triples","title":"Triples","text":"<p>An RDF triple is represented by a <code>Triple</code> Object.</p> Attribute Function subject <code>getSubject()</code> predicate <code>getPredicate()</code> object <code>getObject()</code>"},{"location":"api/#graphs","title":"Graphs","text":""},{"location":"api/#accessing-the-data-graph","title":"Accessing the Data Graph","text":"<p>During a validation process, a variable points at the <code>Graph</code> Object representing the SHACL data graph.</p> JavaScriptPython <pre><code>$data\n</code></pre> <pre><code>_data\n</code></pre>"},{"location":"api/#accessing-the-shapes-graph","title":"Accessing the Shapes Graph","text":"<p>During a validation process, a variable points at the <code>Graph</code> Object representing the SHACL shapes graph.</p> JavaScriptPython <pre><code>$shapes\n</code></pre> <pre><code>_shapes\n</code></pre>"},{"location":"api/#example","title":"Example","text":"JavaScriptPython"},{"location":"constraints/","title":"X-based Constraints","text":""},{"location":"constraints/#constraints","title":"Constraints","text":"<p>SHACL-X supports the definition of constraints based on X.</p>"},{"location":"constraints/#an-example-of-a-x-based-constraint","title":"An Example of a X-based Constraint","text":""},{"location":"constraints/#example-data-graph","title":"Example data graph","text":"<pre><code>@prefix ex: &lt;http://example.org/ns#&gt; .\n\nex:ValidCountry a ex:Country ;\n    ex:germanLabel \"Spanien\"@de .\n\nex:InvalidCountry a ex:Country ;\n    ex:germanLabel \"Spain\"@en .\n</code></pre>"},{"location":"constraints/#example-shapes-graph","title":"Example shapes graph","text":"JavaScriptPython <pre><code>ex:LanguageExampleShape\n    a sh:NodeShape ;\n    sh:targetClass ex:Country ;\n    sh:js [\n        a sh:JSConstraint ;\n        sh:message \"Values are literals with German language tag.\" ;\n        sh:jsLibrary [ sh:jsLibraryURL \"http://example.org/js/germanLabel.js\" ] ;\n        sh:jsFunctionName \"validateGermanLabel\" ;\n    ] .\n</code></pre> <pre><code>ex:LanguageExampleShape\n    a sh:NodeShape ;\n    sh:targetClass ex:Country ;\n    sh:py [\n        a sh:PyConstraint ;\n        sh:message \"Values are literals with German language tag.\" ;\n        sh:pyLibrary [ sh:pyLibraryURL \"http://example.org/py/german_label.py\" ] ;\n        sh:pyFunctionName \"validate_german_label\" ;\n    ] .\n</code></pre>"},{"location":"constraints/#example-x-function","title":"Example X function","text":"JavaScriptPython <pre><code>function validateGermanLabel($this) {\n    let results = [];\n    let p = TermFactory.namedNode(\"http://example.org/ns#germanLabel\");\n    let s = $data.find($this, p, null);\n    for (let t = s.next(); t; t = s.next()) {\n        let object = t.getObject();\n        if (!object.isLiteral() || !object.getLanguage().startsWith(\"de\")) {\n            results.push({\n                value: object\n            });\n        }\n    }\n    return results;\n}\n</code></pre> <pre><code>def validate_german_label(this):\n    results = []\n    p = py_tf.namedNode(\"http://example.org/ns#germanLabel\")\n    s = _data.find(this, p, None)\n\n    while (t := s.next()) != None:\n        object = t.getObject()\n        if not object.isLiteral() or not object.getLanguage().startswith(\"de\"):\n            results.append({\n                \"value\": object\n            })\n\n    return results\n</code></pre>"},{"location":"constraints/#example-validation-results","title":"Example validation results","text":"JavaScriptPython <pre><code>[   a           sh:ValidationReport ;\n    sh:conforms false ;\n    sh:result   [   a                             sh:ValidationResult ;\n                    sh:focusNode                  ex:InvalidCountry ;\n                    sh:resultMessage              \"Values are literals with German language tag.\" ;\n                    sh:resultSeverity             sh:Violation ;\n                    sh:sourceConstraint           []  ;\n                    sh:sourceConstraintComponent  sh:JSConstraintComponent ;\n                    sh:sourceShape                ex:LanguageExampleShape ;\n                    sh:value                      \"Spain\"@en\n    ]\n] .\n</code></pre> <pre><code>[   a           sh:ValidationReport ;\n    sh:conforms false ;\n    sh:result   [   a                             sh:ValidationResult ;\n                    sh:focusNode                  ex:InvalidCountry ;\n                    sh:resultMessage              \"Values are literals with German language tag.\" ;\n                    sh:resultSeverity             sh:Violation ;\n                    sh:sourceConstraint           []  ;\n                    sh:sourceConstraintComponent  sh:PyConstraintComponent ;\n                    sh:sourceShape                ex:LanguageExampleShape ;\n                    sh:value                      \"Spain\"@en\n    ]\n] .\n</code></pre>"},{"location":"constraints/#constraint-components","title":"Constraint Components","text":""},{"location":"constraints/#an-example-of-a-x-based-constraint-component","title":"An Example of a X-based Constraint Component","text":""},{"location":"constraints/#example-data-graph_1","title":"Example data graph","text":"<pre><code>@prefix ex: &lt;http://example.org/ns#&gt; .\n\nex:ValidCountry a ex:Country ;\n    ex:name \"Italy\" .\n\nex:InvalidCountry a ex:Country ;\n    ex:name \"Switzerland\" .\n</code></pre>"},{"location":"constraints/#example-shapes-graph_1","title":"Example shapes graph","text":"<pre><code>ex:CountryExampleShape\n    a sh:NodeShape ;\n    sh:targetClass ex:Country ;\n    sh:property [\n        sh:path ex:name ;\n        ex:maxLength 5 ;\n    ] .\n\nex:MaxLengthConstraintComponent\n    a sh:ConstraintComponent ;\n    sh:parameter [\n        sh:path ex:maxLength ;\n        sh:datatype xsd:integer ;\n    ] ;\n    sh:validator ex:hasMaxLength .\n</code></pre> JavaScriptPython <pre><code>ex:hasMaxLength\n    a sh:JSValidator ;\n    sh:message \"Value has more than {$maxLength} characters\" ;\n    sh:jsLibrary [ sh:jsLibraryURL \"http://example.org/js/hasMaxLength.js\"^^xsd:anyURI ] ;\n    sh:jsFunctionName \"hasMaxLength\" ;\n    rdfs:comment \"\"\"\n        Note that $value and $maxLength are RDF nodes expressed in JavaScript Objects.\n        Their string value is accessed via the .getLex() and .getUri() methods.\n        The function returns true if no violation has been found.\n        \"\"\" .\n</code></pre> <pre><code>ex:hasMaxLength\n    a sh:PyValidator ;\n    sh:message \"Value has more than {$maxLength} characters\" ;\n    sh:pyLibrary [ sh:pyLibraryURL \"http://example.org/js/has_max_length.py\"^^xsd:anyURI ] ;\n    sh:pyFunctionName \"has_max_length\" ;\n    rdfs:comment \"\"\"\n        Note that _value and _maxLength are RDF nodes expressed in Python Objects.\n        Their string value is accessed via the .getLex() and .getUri() attributes.\n        The function returns true if no violation has been found.\n        \"\"\" .\n</code></pre>"},{"location":"constraints/#example-x-function_1","title":"Example X function","text":"JavaScriptPython <pre><code>function hasMaxLength($value, $maxLength) {\n    if ($value.isLiteral()) {\n        return $value.getLex().length &lt;= $maxLength.getLex();\n    } else if ($value.isURI()) {\n        return $value.getUri().length &lt;= $maxLength.getLex();\n    } else { // Blank node\n        return false;\n    }\n}\n</code></pre> <pre><code>def has_max_length(_value, _maxLength):\n    if _value.isLiteral():\n        return len(_value.getLex()) &lt;= int(_maxLength.getLex())\n    elif _value.isURI():\n        return len(_value.getUri()) &lt;= int(_maxLength.getLex())\n    else:\n        return False\n</code></pre>"},{"location":"constraints/#example-validation-results_1","title":"Example validation results","text":"<pre><code>[   a            sh:ValidationReport ;\n    sh:conforms  false ;\n    sh:result   [   a                               sh:ValidationResult ;\n                    sh:focusNode                    ex:InvalidCountry ;\n                    sh:resultMessage                \"Value has more than 5 characters\" ;\n                    sh:resultPath                   ex:name ;\n                    sh:resultSeverity               sh:Violation ;\n                    sh:sourceConstraintComponent    ex:MaxLengthConstraintComponent ;\n                    sh:sourceShape                  []  ;\n                    sh:value                        \"Switzerland\"\n    ]\n] .\n</code></pre>"},{"location":"functions/","title":"X-based Functions","text":"<p>This section shows how to define <code>XFunctions</code>. The defined function can be used within a SPARQL query.</p>"},{"location":"functions/#example-data-graph","title":"Example data graph","text":"<pre><code>@prefix ex: &lt;http://example.org/ns#&gt; .\n\nex:JohnDoe a ex:Person ;\n    ex:name \"John\" ;\n    ex:surname \"Doe\" .\n</code></pre>"},{"location":"functions/#example-shapes-graph","title":"Example shapes graph","text":"JavaScriptPython <pre><code>ex:FullNameShape\n    a sh:NodeShape ;\n    sh:targetClass ex:Person ;\n    sh:rule [\n        a sh:SPARQLRule ;\n        sh:construct \"\"\"\n            PREFIX ex: &lt;http://example.org/ns#&gt;\n            CONSTRUCT {\n                $this ex:fullName ?fullName .\n            }\n            WHERE {\n                $this ex:name ?name .\n                $this ex:surname ?surname .\n                BIND(ex:concat(?name, ?surname) AS ?fullName)\n            }\n        \"\"\"\n    ] .\n\nex:concat\n    a sh:JSFunction ;\n    sh:parameter [\n        sh:path ex:arg1 ;\n        sh:datatype xsd:integer ;\n    ] ;\n    sh:parameter [\n        sh:path ex:arg2 ;\n        sh:datatype xsd:integer ;\n    ] ;\n    sh:returnType xsd:integer ;\n    sh:jsLibrary [ sh:jsLibraryURL \"http://shacl-x-web/utils.js\"^^xsd:anyURI ] ;\n    sh:jsFunctionName \"concat\" .\n</code></pre> <pre><code>ex:FullNameShape\n    a sh:NodeShape ;\n    sh:targetClass ex:Person ;\n    sh:rule [\n        a sh:SPARQLRule ;\n        sh:construct \"\"\"\n            PREFIX ex: &lt;http://example.org/ns#&gt;\n            CONSTRUCT {\n                $this ex:fullName ?fullName .\n            }\n            WHERE {\n                $this ex:name ?name .\n                $this ex:surname ?surname .\n                BIND(ex:concat(?name, ?surname) AS ?fullName)\n            }\n        \"\"\"\n    ] .\n\nex:concat\n    a sh:PyFunction ;\n    sh:parameter [\n        sh:path ex:arg1 ;\n        sh:datatype xsd:integer ;\n    ] ;\n    sh:parameter [\n        sh:path ex:arg2 ;\n        sh:datatype xsd:integer ;\n    ] ;\n    sh:returnType xsd:integer ;\n    sh:pyLibrary [ sh:pyLibraryURL \"http://shacl-x-web/utils.py\"^^xsd:anyURI ] ;\n    sh:pyFunctionName \"concat\" .\n</code></pre>"},{"location":"functions/#example-x-function","title":"Example X function","text":"JavaScriptPython <pre><code>function concat($arg1, $arg2) {\n    return $arg1.getLex() + \" \" + $arg2.getLex();\n}\n</code></pre> <pre><code>def concat(_arg1, _arg2):\n    return _arg1.getLex() + \" \" + _arg2.getLex()\n</code></pre>"},{"location":"functions/#example-inferred-triples","title":"Example inferred triples","text":"<pre><code>ex:JohnDoe ex:fullName \"John Doe\" .\n</code></pre>"},{"location":"rdf/","title":"Representing X in RDF","text":"<p>The JavaScript-based extension mechanism for SHACL (SHACL-JS) defines some RDF terms that can be used to represent JavaScript code and libraries as part of the shapes graph. SHACL-X extends that syntax by adding new terms for the new supported languages.</p> <p>The extended vocabulary includes the classes <code>sh:</code>X<code>Executable</code>, where X = JS | Py (e.g. <code>sh:PyExecutable</code>). SHACL instances of this class are called X executables.</p>"},{"location":"rdf/#functionname","title":"FunctionName","text":"<p>Every X executable must have exactly one value for the property <code>sh:</code>x<code>FunctionName</code>. The value is a <code>literal</code> with datatype <code>xsd:string</code>.</p>"},{"location":"rdf/#x-library","title":"x Library","text":"<p>Every X executable must have at least one value for the property <code>sh:</code>x<code>Library</code>. The values of the property are IRIs or blank nodes. In both cases, they must be a well formed SHACL instance of the class <code>sh:</code>X<code>Library</code>.</p>"},{"location":"rdf/#x-library_1","title":"X Library","text":"<p>The class <code>sh:</code>X<code>Library</code> is used to declare X libraries. An X library is a pointer to zero or more X files that are executed before the evaluation of an X executable. Libraries depdenency is allowed, by declaring further <code>sh:</code>x<code>Library</code> triples. The values of the property <code>sh:</code>x<code>LibraryURL</code> are literals with datatype <code>xsd:anyURI</code>.</p>"},{"location":"rules/","title":"X Rules","text":"<p>SHACL-X allows to define new rules types that are X-based.</p> Rule Type IRI Key Property Other Properties <code>sh:JSRule</code> <code>sh:jsFunctionName</code> <code>sh:jsLibrary</code> <code>sh:PyRule</code> <code>sh:pyFunctionName</code> <code>sh:pyLibrary</code>"},{"location":"rules/#an-example-of-an-x-rule","title":"An Example of an X rule","text":"<p>The following example illustrates the use of a X rule to compute the area of a rectangle, by multiplying width and height.</p>"},{"location":"rules/#example-data-graph","title":"Example data graph","text":"<pre><code>ex:ExampleRectangle\n    a ex:Rectangle ;\n    ex:width 7 ;\n    ex:height 8 .\n</code></pre>"},{"location":"rules/#example-shapes-graph","title":"Example shapes graph","text":"JavaScriptPython <pre><code>ex:RectangleShape\na sh:NodeShape ;\nsh:targetClass ex:Rectangle ;\nsh:rule [\n    a sh:JSRule ;\n    sh:jsFunctionName \"computeArea\" ;\n    sh:jsLibrary [ sh:jsLibraryURL \"http://example.org/js/rectangle.js\"^^xsd:anyURI ] ;\n] .\n</code></pre> <pre><code>ex:RectangleShape\na sh:NodeShape ;\nsh:targetClass ex:Rectangle ;\nsh:rule [\n    a sh:PyRule ;\n    sh:pyFunctionName \"compute_area\" ;\n    sh:pyLibrary [ sh:pyLibraryURL \"http://example.org/py/rectangle.py\"^^xsd:anyURI ] ;\n] .\n</code></pre>"},{"location":"rules/#example-x-rule","title":"Example X rule","text":"JavaScriptPython <pre><code>let NS = \"http://datashapes.org/js/tests/rules/rectangle.test#\";\n\nfunction computeArea($this) {\n    let width = getProperty($this, \"width\");\n    let height = getProperty($this, \"height\");\n    let area = TermFactory.literal(width.getLex() * height.getLex(), width.getDatatype());\n    let areaProperty = TermFactory.namedNode(NS + \"area\");\n    return [ [$this, areaProperty, area] ]; \n}\n\nfunction getProperty($this, name) {\n    let it = $data.find($this, TermFactory.namedNode(NS + name), null);\n    let result = it.next().getObject();\n    it.close();\n    return result;\n}\n</code></pre> <pre><code>ns = \"http://datashapes.org/py/tests/rules/rectangle.test#\"\n\n\ndef compute_area(_this):\n    width = get_property(_this, \"width\")\n    height = get_property(_this, \"height\")\n    area = py_tf.literal(int(width.getLex()) * int(height.getLex()), width.getDatatype())\n    area_property = py_tf.namedNode(ns + \"area\")\n    return [ [_this, area_property, area] ]\n\n\ndef get_property(_this, name):\n    it = _data.find(_this, py_tf.namedNode(ns + name), None)\n    result = it.next().getObject()\n    it.close()\n    return result\n</code></pre>"},{"location":"rules/#example-inferred-triples","title":"Example inferred triples","text":"<pre><code>ex:ExampleRectangle ex:area 56 .\n</code></pre>"}]}